servlet Container manages the entire circle of the servlet which is used by javax.servlet .
Servlet interface to understand the Servlet object and manage it
  Stages of the Servlet Life Cycle: The Servlet life cycle mainly goes through four stages,
1>Loading a Servlet.
Loading a Servlet: The first stage of the Servlet lifecycle involves loading and initializing the Servlet by the Servlet container. The Web container or Servlet Container can load the Servlet at either of the following two stages : 
Initializing the context, on configuring the Servlet with a zero or positive integer value.
If the Servlet is not preceding stage, it may delay the loading process until the Web container determines that this Servlet is needed to service a request.
The Servlet container performs two operations in this stage :
Loading : Loads the Servlet class.
Instantiation : Creates an instance of the Servlet. To create a new instance of the Servlet, the container uses the no-argument constructor.
2>Initializing the Servlet.
After the Servlet is instantiated successfully, the Servlet container initializes the instantiated Servlet object. The container initializes the Servlet object by invoking the Servlet.init(ServletConfig) method which accepts ServletConfig object reference as parameter. 
The Servlet container invokes the Servlet.init(ServletConfig) method only once, immediately after the Servlet.init(ServletConfig) object is instantiated successfully. This method is used to initialize the resources, such as JDBC datasource.
Now, if the Servlet fails to initialize, then it informs the Servlet container by throwing the ServletException or UnavailableException.
3>Request handling.
After initialization, the Servlet instance is ready to serve the client requests. The Servlet container performs the following operations when the Servlet instance is located to service a request : 
It creates the ServletRequest and ServletResponse objects. In this case, if this is a HTTP request then the Web container creates HttpServletRequest and HttpServletResponse objects which are subtypes of the ServletRequest and ServletResponse objects respectively.
After creating the request and response objects it invoke the Servlet.service(ServletRequest, ServletResponse) method by passing the request and response objects.
The service() method while processing the request may throw the ServletException or UnavailableException or IOException.
4>Destroying the Servlet.
When a Servlet container decides to destroy the Servlet, it performs the following operations, 
It allows all the threads currently running in the service method of the Servlet instance to complete their jobs and get released.
After currently running threads have completed their jobs, the Servlet container calls the destroy() method on the Servlet instance.
After the destroy() method is executed, the Servlet conatiner releases all the references of this Servlet instance so that it becomes eligible for garbage collection.

There are three life cycle methods of a Servlet :
init()
The Servlet.init() method is called by the Servlet container to indicate that this Servlet instance is instantiated successfully and is about to put into service. 
//init() method

public class MyServlet implements Servlet{
   public void init(ServletConfig config) throws ServletException {
        //initialization code
   }
    //rest of code
}
service()
The service() method of the Servlet is invoked to inform the Servlet about the client requests. 
This method uses ServletRequest object to collect the data requested by the client.
This method uses ServletResponse object to generate the output content.
// service() method

public class MyServlet implements Servlet{
    public void service(ServletRequest res, ServletResponse res)
    throws ServletException, IOException {
            // request handling code
    }
    // rest of code
}
destroy()
The destroy() method runs only once during the lifetime of a Servlet and signals the end of the Servlet instance. 
//destroy() method

public void destroy()
As soon as the destroy() method is activated, the Servlet container releases the Servlet instance.







Servlet life cycle can be defined as the stages through which the servlet passes from its creation to its destruction.
The servlet life cycle consist these stages:
Servlet is borned
Servlet is initalized
Servlet is ready to service
Servlet is servicing
Servlet is not ready to service
Servlet is destroyed

program
/ Java program to show servlet example 
// Importing required Java libraries 
import java.io.*; 
import javax.servlet.*; 
import javax.servlet.http.*; 
  
// Extend HttpServlet class 
public class AdvanceJavaConcepts extends HttpServlet  
{  
   private String output; 
    
   // Initializing servelet 
   public void init() throws ServletException  
   { 
      output = "Advance Java Concepts"; 
   } 
  
